name: Release
on:
  push:
#    branches:
#      - main
  pull_request:
    branches:
      - main

jobs:
  check_if_version_upgraded:
    name: Check if version upgrade
    # We run this only if it's a push on the default branch or if it's a PR from a 
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.NPM_TOKEN is 
    # defined but GitHub Action don't allow it yet.
#    if: |
#      github.event_name == 'push' || 
#      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login 
    runs-on: ubuntu-latest
    outputs:
      wasm_version: ${{ steps.version-updated.outputs.current-package-version }}
      wasm_has_updated: ${{ steps.version-updated.outputs.has-updated }}
    steps:
      - uses: JiPaix/package-json-updated-action@v1.0.3
        id: version-updated
        with:
          path: $GITHUB_WORKSPACE/rust/automerge-wasm/package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish:
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
#     We create release only if the version in the package.json have been upgraded and this CI is running against the main branch.
#     We allow branches with a PR open on main to publish pre-release (x.y.z-rc.u) but not actual releases.
    # TODO reinstate check
    if: |
      needs.check_if_version_upgraded.outputs.wasm_has_updated == 'true' && true
#      (
#        github.event_name == 'push' ||
#        needs.check_if_version_upgraded.outputs.is_pre_release == 'true'
#      )
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - run: rm -r .github/workflows
      - name: Remove tmp_branch if it exists
        run: git push origin :tmp_branch || true
      - run: git checkout -b tmp_branch
      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli wasm-opt
      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown
      - run: yarn --cwd $GITHUB_WORKSPACE/rust/automerge-wasm install
      - run: yarn --cwd $GITHUB_WORKSPACE/rust/automerge-wasm run build
      - run: |
          mkdir $GITHUB_WORKSPACE/deno_wasm_dist
          cp $GITHUB_WORKSPACE/rust/automerge-wasm/deno/* $GITHUB_WORKSPACE/deno_wasm_dist
          cp $GITHUB_WORKSPACE/rust/automerge-wasm/index.d.ts $GITHUB_WORKSPACE/deno_wasm_dist
        env:
          DRY_RUN: "0"
#      - run: |
#          if [ "$(npm show . version)" = "$VERSION" ]; then
#            echo "This version is already published"
#            exit 0
#          fi
#          if [ "$NODE_AUTH_TOKEN" = "" ]; then
#            echo "Can't publish on NPM, You need a NPM_TOKEN secret."
#            false
#          fi
#          EXTRA_ARGS=""
#          if [ "$IS_PRE_RELEASE" = "true" ]; then
#              EXTRA_ARGS="--tag next"
#          fi
#          npm publish $EXTRA_ARGS
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
#          VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
#          IS_PRE_RELEASE: ${{ needs.check_if_version_upgraded.outputs.is_pre_release }}
      - run: |
          git config --global user.name "actions"
          git config --global user.email actions@github.com
          git add $GITHUB_WORKSPACE/deno_wasm_dist
          git commit -am "Add deno release files"
          git push origin tmp_branch
#      - uses: softprops/action-gh-release@v1
#        with:
#          name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
#          tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
#          target_commitish: tmp_branch
#          generate_release_notes: false
#          draft: false
#          prerelease: ${{ needs.check_if_version_upgraded.outputs.is_pre_release == 'true' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Remove tmp_branch
#        run: git push origin :tmp_branch

